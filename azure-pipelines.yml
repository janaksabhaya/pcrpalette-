# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - newportdevelopment

pool:
  vmImage: 'ubuntu-latest'

variables:
  dev-qasubscription: 'PCR-DEV-QA(cb0f5d39-b859-40c4-a52e-5a22e7189743)'

stages:
  - stage: build_dev

    jobs:
      - job: build

        steps:
          - template: buildTemplate.yml
            parameters:
              env: 'DEV'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: deploy_dev

    jobs:
      - job: deploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(dev-qasubscription)'
              appType: 'webApp'
              WebAppName: 'universal-dashboard-newportdev-devOps'
              packageForLinux: '$(System.ArtifactsDirectory)/drop/build.zip'
              enableCustomDeployment: true
              DeploymentType: 'zipDeploy'
              TakeAppOfflineFlag: false

              # WebConfigParameters: '-Handler iisnode -NodeStartFile server.js -appType node'
              # AppSettings: '-WEBSITE_NODE_DEFAULT_VERSION 6.9.1'

          - powershell: |
              try {
                $response = Invoke-WebRequest -Uri $(myDashboardUI.AppServiceApplicationUrl) -ErrorAction Stop
              }
              catch {
                $StatusCode = $_.Exception.Response.StatusCode.value__
              }
              return $StatusCode
            displayName: 'PowerShell Script'

  - stage: build_qa

    jobs:
      - job: build

        steps:
          - template: buildTemplate.yml
            parameters:
              env: 'QA'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: deploy_qa

    jobs:
      - job: deploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(dev-qasubscription)'
              appType: 'webApp'
              WebAppName: 'universal-dashboard-newportqa-devOps'
              packageForLinux: '$(System.ArtifactsDirectory)/drop/build.zip'
              enableCustomDeployment: true
              DeploymentType: 'zipDeploy'
              TakeAppOfflineFlag: false

              # WebConfigParameters: '-Handler iisnode -NodeStartFile server.js -appType node'
              # AppSettings: '-WEBSITE_NODE_DEFAULT_VERSION 6.9.1'

          - powershell: |
              try {
                $response = Invoke-WebRequest -Uri $(myDashboardUI.AppServiceApplicationUrl) -ErrorAction Stop
              }
              catch {
                $StatusCode = $_.Exception.Response.StatusCode.value__
              }
              return $StatusCode
            displayName: 'PowerShell Script'
# - stage: build_qa

#   jobs:
#   - job: build

#     steps:
#     - template: buildTemplate.yml
#       parameters:
#         env: 'QA'

# - stage: deploy_qa

#   jobs:
#   - job: deploy
#     steps:
#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: 'dashboard_qa'
#         downloadPath: '$(System.ArtifactsDirectory)'

#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         azureSubscription: '$(dev-qasubscription)'
#         appType: 'webApp'
#         WebAppName: 'universal-dashboard-newportqa-devOps'
#         packageForLinux: '$(System.ArtifactsDirectory)/dashboard_qa'
#         WebConfigParameters: '-Handler iisnode -NodeStartFile server.js -appType node'
#         AppSettings: '-WEBSITE_NODE_DEFAULT_VERSION 6.9.1'

#     - powershell: |
#         try {
#           $response = Invoke-WebRequest -Uri $(myDashboardUI.AppServiceApplicationUrl) -ErrorAction Stop
#         }
#         catch {
#           $StatusCode = $_.Exception.Response.StatusCode.value__
#         }
#         return $StatusCode
#       displayName: 'PowerShell Script'
